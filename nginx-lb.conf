events {
    worker_connections 2048;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging
    log_format cluster_lb '$remote_addr - $remote_user [$time_local] '
                         '"$request" $status $body_bytes_sent '
                         '"$http_referer" "$http_user_agent" '
                         'upstream=$upstream_addr rt=$request_time '
                         'uct="$upstream_connect_time" uht="$upstream_header_time" '
                         'urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log cluster_lb;
    error_log  /var/log/nginx/error.log;

    # Upstream definitions
    upstream threads_workers {
        # GPU-enabled worker (higher weight for GPU tasks)
        server worker-1:80 weight=3 max_fails=3 fail_timeout=30s;
        # CPU workers
        server worker-2:80 weight=2 max_fails=3 fail_timeout=30s;
        server worker-3:80 weight=2 max_fails=3 fail_timeout=30s;
        
        # Load balancing method
        least_conn;
        
        # Health checks
        keepalive 32;
    }

    upstream gpu_workers {
        # Only GPU-capable workers for intensive calculations
        server worker-1:80 weight=5 max_fails=2 fail_timeout=20s;
        server worker-3:80 weight=3 max_fails=2 fail_timeout=20s;
        
        least_conn;
        keepalive 16;
    }

    upstream api_workers {
        server worker-1:8080 weight=3 max_fails=3 fail_timeout=30s;
        server worker-2:8080 weight=2 max_fails=3 fail_timeout=30s;
        server worker-3:8080 weight=2 max_fails=3 fail_timeout=30s;
        
        ip_hash;  # Session affinity for API calls
        keepalive 32;
    }

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=general:10m rate=20r/s;
    limit_req_zone $binary_remote_addr zone=gpu_intensive:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=api_calls:10m rate=15r/s;

    # WebSocket upgrade mapping
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    server {
        listen 80;
        server_name _;

        # Security headers
        add_header X-Frame-Options SAMEORIGIN always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Main application routes
        location / {
            limit_req zone=general burst=50 nodelay;
            
            proxy_pass http://threads_workers;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Connection settings
            proxy_connect_timeout 10s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
        }

        # GPU-intensive routes (Collatz calculations, complex threading)
        location ~ ^/(collatz|gpu|intensive) {
            limit_req zone=gpu_intensive burst=20 nodelay;
            
            proxy_pass http://gpu_workers;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-GPU-Request "true";
            
            # Extended timeouts for GPU operations
            proxy_connect_timeout 15s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
            
            # Disable buffering for real-time results
            proxy_buffering off;
        }

        # API endpoints
        location /api/ {
            limit_req zone=api_calls burst=30 nodelay;
            
            proxy_pass http://api_workers;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # API-specific settings
            proxy_connect_timeout 5s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # WebSocket connections for real-time updates
        location /ws {
            proxy_pass http://api_workers;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket timeouts
            proxy_read_timeout 3600s;
            proxy_send_timeout 3600s;
        }

        # Cluster coordinator access
        location /coordinator/ {
            proxy_pass http://coordinator:3000/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "cluster healthy\n";
            add_header Content-Type text/plain;
        }

        # Load balancer status
        location /lb-status {
            access_log off;
            return 200 "load balancer active - workers: 3\n";
            add_header Content-Type text/plain;
            allow 172.20.0.0/16;
            deny all;
        }

        # Monitoring metrics (restricted access)
        location /metrics {
            proxy_pass http://coordinator:9090/metrics;
            allow 172.20.0.0/16;  # Only cluster network
            allow 127.0.0.1;      # Local access
            deny all;
        }

        # Static assets with caching
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            proxy_pass http://threads_workers;
            proxy_set_header Host $host;
            
            # Aggressive caching for static assets
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary Accept-Encoding;
            
            # Compress static assets
            gzip_static on;
        }
    }

    # HTTPS server (if SSL certificates are available)
    server {
        listen 443 ssl http2;
        server_name _;

        # SSL configuration
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;
        ssl_session_tickets off;

        # Modern SSL configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;

        # OCSP stapling
        ssl_stapling on;
        ssl_stapling_verify on;

        # Same location blocks as HTTP server
        location / {
            limit_req zone=general burst=50 nodelay;
            proxy_pass http://threads_workers;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
        }

        # Additional HTTPS-specific configurations...
    }
}
